#!/usr/bin/bash

#SCL=""
SCL="scl enable rh-ruby22 --"
STAP="stap -v --skip-badvars"
REFRESH=1000
CLEAR=300000
PERPAGE=${4:-25}
MAXENTRIES=100000
IGNORED_CLASSES=(
Foreman::Logging.*
Foreman::Gettext.*
Foreman::ThreadSession.*
Proxy::Log.*
Kernel
String
Symbol
NilClass
Time
Array
Hash
Enumerable
Fixnum
Integer
Rational
Numeric
Float
Regexp
Module
Class
Thread
Mutex
IO)
IGNORED_CLASSES_REGEXP=$(IFS=$'|'; echo "${IGNORED_CLASSES[*]}")
export LC_ALL=C

if [ "$1" == "proxy" ]; then
  THE_PID=$(ps axu | grep /usr/share/foreman-proxy/bin/smart-proxy | grep -E '^foreman' | awk '{print $2}' | head -n1)
elif [ "$1" == "rails" -o "$1" == "foreman" -o -z "$1" ]; then
  THE_PID=$(ps axu | grep "Passenger RackApp: /usr/share/foreman" | grep -E '^foreman' | awk '{print $2}' | head -n1)
else
  THE_PID=$1
fi

if [ "$3" == "all" ]; then
  TRACE_ROOT=/
else
  TRACE_ROOT="/usr/share/foreman|/opt/theforeman/tfm/root/usr/share/gems/gems/foreman|/opt/theforeman/tfm/root/usr/share/gems/gems/dynflow"
fi

# fix for https://bugzilla.redhat.com/show_bug.cgi?id=1418296
sed -i 's/user_string(/user_string_warn(/' /usr/share/systemtap/tapset/libruby.so.*.stp /opt/rh/rh-ruby22/root/usr/share/systemtap/tapset/libruby.so.*.stp 2>/dev/null || true

read -r -d '' FUNCTIONS << EOFUNC
  function fmtstr(str, len) {
    if (strlen(str) > len) {
      return substr(str, strlen(str) - len, len)
    } else {
      return str
    }
  }
EOFUNC

if [ "$2" == "trace" -o -z "$2" ]; then
  echo Tracing started at $(date)
  tracing_end() {
    echo Tracing ended at $(date)
  }
  trap tracing_end EXIT

  $SCL $STAP - -x $THE_PID <<-EOSTAP
  probe ruby.method.entry, ruby.cmethod.entry
  {
    if (file =~ "^$TRACE_ROOT" && classname !~ "^($IGNORED_CLASSES_REGEXP)$") {
      printf("%s.%s\n", classname, methodname)
    }
  }
  probe ruby.raise
  {
    if (file =~ "^$TRACE_ROOT") {
      printf("EXCEPTION %s (%s:%d)\n", classname, file, line)
    }
  }
EOSTAP
elif [ "$2" == "time" ]; then
  $SCL $STAP -DMAXMAPENTRIES=$MAXENTRIES - -x $THE_PID <<-EOSTAPTOP
$FUNCTIONS
  global stime, elapsed
  probe ruby.method.entry, ruby.cmethod.entry
  {
    if (file =~ "^$TRACE_ROOT") {
      t = gettimeofday_us()
      stime[tid() in stime] = t
    }
  }
  probe ruby.method.return, ruby.cmethod.return
  {
    if (file =~ "^$TRACE_ROOT") {
      st = stime[tid() in stime]
      if (st) {
        t = gettimeofday_us()
        e = t - st
        elapsed[file, methodname, line] <<< e
        delete stime[tid() in stime]
      }
    }
  }
  probe timer.ms($REFRESH) {
    ansi_clear_screen()
    printf("%80s %6s %30s %6s\n", "FILENAME", "LINE", "METHOD", "TIME")
    foreach ([filename, funcname, lineno] in elapsed @sum - limit $PERPAGE) {
      printf("%80s %6d %30s %6d\n",
        fmtstr(filename, 80),
        lineno,
        fmtstr(funcname, 30),
        @sum(elapsed[filename, funcname, lineno]))
    }
  }
  probe timer.ms($CLEAR) {
    delete elapsed
  }
EOSTAPTOP
elif [ "$2" == "calls" ]; then
  $SCL $STAP -DMAXMAPENTRIES=$MAXENTRIES - -x $THE_PID <<-EOSTAPTOP
$FUNCTIONS
  global fn_calls
  probe ruby.method.entry, ruby.cmethod.entry
  {
    if (file =~ "^$TRACE_ROOT") {
      fn_calls[file, methodname, line] <<< 1
    }
  }
  probe timer.ms($REFRESH) {
    ansi_clear_screen()
    printf("%80s %6s %30s %6s\n", "FILENAME", "LINE", "METHOD", "CALLS")
    foreach ([filename, funcname, lineno] in fn_calls- limit $PERPAGE) {
      printf("%80s %6d %30s %6d\n",
        fmtstr(filename, 80),
        lineno,
        fmtstr(funcname, 30),
        @count(fn_calls[filename, funcname, lineno]))
    }
  }
  probe timer.ms($CLEAR) {
    delete fn_calls
  }
EOSTAPTOP
elif [ "$2" == "strings" ]; then
  $SCL $STAP -DMAXMAPENTRIES=$MAXENTRIES - -x $THE_PID <<-EOSTAPTOP
$FUNCTIONS
  global fn_calls
  probe ruby.string.create
  {
    if (file =~ "^$TRACE_ROOT") {
      fn_calls[file, line] <<< 1
    }
  }
  probe timer.ms($REFRESH) {
    ansi_clear_screen()
    printf("%90s %6s %6s\n", "FILENAME", "LINE", "COUNT")
    foreach ([filename, lineno] in fn_calls- limit $PERPAGE) {
      printf("%90s %6d %6d\n",
        fmtstr(filename, 90),
        lineno,
        @count(fn_calls[filename, lineno]))
    }
  }
  probe timer.ms($CLEAR) {
    delete fn_calls
  }
EOSTAPTOP
elif [ "$2" == "arrays" ]; then
  $SCL $STAP -DMAXMAPENTRIES=$MAXENTRIES - -x $THE_PID <<-EOSTAPTOP
$FUNCTIONS
  global fn_calls
  probe ruby.array.create, ruby.hash.create
  {
    if (file =~ "^$TRACE_ROOT") {
      fn_calls[file, line] <<< 1
    }
  }
  probe timer.ms($REFRESH) {
    ansi_clear_screen()
    printf("%90s %6s %6s\n", "FILENAME", "LINE", "COUNT")
    foreach ([filename, lineno] in fn_calls- limit $PERPAGE) {
      printf("%90s %6d %6d\n",
        fmtstr(filename, 90),
        lineno,
        @count(fn_calls[filename, lineno]))
    }
  }
  probe timer.ms($CLEAR) {
    delete fn_calls
  }
EOSTAPTOP
elif [ "$2" == "objects" ]; then
  $SCL $STAP -DMAXMAPENTRIES=$MAXENTRIES - -x $THE_PID <<-EOSTAPTOP
$FUNCTIONS
  global fn_calls
  probe ruby.object.create
  {
    if (file =~ "^$TRACE_ROOT") {
      fn_calls[file, classname, line] <<< 1
    }
  }
  probe timer.ms($REFRESH) {
    ansi_clear_screen()
    printf("%70s %6s %40s %6s\n", "FILENAME", "LINE", "OBJECT", "COUNT")
    foreach ([filename, obj, lineno] in fn_calls- limit $PERPAGE) {
      printf("%70s %6d %40s %6d\n",
        fmtstr(filename, 70),
        lineno,
        fmtstr(obj, 40),
        @count(fn_calls[filename, obj, lineno]))
    }
  }
  probe timer.ms($CLEAR) {
    delete fn_calls
  }
EOSTAPTOP
elif [ "$2" == "objects-total" ]; then
  $SCL $STAP -DMAXMAPENTRIES=$MAXENTRIES - -x $THE_PID <<-EOSTAPTOP
$FUNCTIONS
  global fn_calls
  probe ruby.object.create
  {
    if (file =~ "^$TRACE_ROOT") {
      fn_calls[classname] <<< 1
    }
  }
  probe timer.ms($REFRESH) {
    ansi_clear_screen()
    printf("%110s %8s\n", "OBJECT", "COUNT")
    foreach ([obj] in fn_calls- limit $PERPAGE) {
      printf("%110s %8d\n",
        fmtstr(obj, 90),
        @count(fn_calls[obj]))
    }
  }
  probe timer.ms($CLEAR) {
    delete fn_calls
  }
EOSTAPTOP
else
  echo "Usage: $0 subject action"
fi

